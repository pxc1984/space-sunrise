using Content.Client._Sunrise.CentCom.BUI;
using Content.Client.Access.UI;
using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared._Sunrise.CentCom.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.CentCom.UI;

[GenerateTypedNameReferences]
public sealed partial class CentComConsoleWindow : FancyWindow
{
    public CentComConsoleWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(CentComConsoleBoundUserInterfaceState state)
    {
        IdButton.Text = state.IsIdPresent
            ? Loc.GetString("id-card-console-window-eject-button")
            : Loc.GetString("id-card-console-window-insert-button");
        IdLabel.Text = state.IdName != string.Empty
            ? state.IdName
            : Loc.GetString("centcom-console-window-empty-id");
        if (state.Station != null)
        {
            StationNameLabel.Text = state.Station.Name;

            AlertLevelButton.Clear();
            foreach (var alertLevel in state.Station.AlertLevels)
            {
                var name = alertLevel;
                if (Loc.TryGetString($"alert-level-{alertLevel}", out var locName))
                {
                    name = locName;
                }
                AlertLevelButton.AddItem(name);
                AlertLevelButton.SetItemMetadata(AlertLevelButton.ItemCount - 1, alertLevel);

                if (alertLevel == state.Station.CurrentAlert)
                {
                    AlertLevelButton.Select(AlertLevelButton.ItemCount - 1);
                }
            }

            DurationButton.Clear();
            foreach (var del in state.Station.Delays)
            {
                var delay = del;
                if (Loc.TryGetString($"centcom-console-duration-{delay.Label}", out var locDelay))
                {
                    delay.Label = locDelay;
                }
                DurationButton.AddItem(delay.Label);
                DurationButton.SetItemMetadata(DurationButton.ItemCount - 1, delay);

                if (delay.Time == state.Station.DefaultDelay)
                {
                    DurationButton.Select(DurationButton.ItemCount - 1);
                }
            }
        }
    }
}
